/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alexprom.tsp_account.daq;

import com.alexprom.tsp_account.report_actions.SystemTagsJpaController;
import com.alexprom.tsp_account.report_actions.exceptions.NonexistentEntityException;
import com.alexprom.tsp_account.report_db.GlobalEntityManager;
import com.alexprom.tsp_account.report_db.SystemTags;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Query;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import org.openide.util.Exceptions;
import org.openide.util.NbPreferences;

public final class TagManagementPanel extends javax.swing.JPanel {

    private final TagManagementOptionsPanelController controller;
    //final List<TankDic> tanks;
    List<SystemTags> tags;
    GlobalEntityManager gem = new GlobalEntityManager();
    EntityManager em = gem.getEm();
    EntityManagerFactory emf = gem.getEmf();
    int initialCnt=0;
    DefaultTableModel model;
    List<SystemTags> tagList;
    List<SystemTags> tagsList;
    SystemTagsJpaController edited = new SystemTagsJpaController(emf);
    
    TagManagementPanel(TagManagementOptionsPanelController controller) {
        this.controller = controller;
        initComponents();
        
        // TODO listen to changes in form fields and call controller.changed()                        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dateChooserPanel1 = new datechooser.beans.DateChooserPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        plcName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnNewTag = new javax.swing.JButton();
        btnDeleteTag = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.jPanel1.border.title"))); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.jPanel2.border.title"))); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.jLabel2.text")); // NOI18N

        jFormattedTextField1.setText(org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.jFormattedTextField1.text")); // NOI18N

        plcName.setText(org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.plcName.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(jLabel3, org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.jLabel3.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(plcName, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 43, Short.MAX_VALUE))
                    .addComponent(jFormattedTextField1))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plcName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFormattedTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setWheelScrollingEnabled(false);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Имя тега", "Адрес тега", "Мин. значение", "Макс. значение"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoscrolls(false);
        jTable1.setColumnSelectionAllowed(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setHeaderValue(org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.jTable1.columnModel.title0")); // NOI18N
            jTable1.getColumnModel().getColumn(1).setHeaderValue(org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.jTable1.columnModel.title1")); // NOI18N
            jTable1.getColumnModel().getColumn(2).setHeaderValue(org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.jTable1.columnModel.title2")); // NOI18N
            jTable1.getColumnModel().getColumn(3).setHeaderValue(org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.jTable1.columnModel.title3")); // NOI18N
        }

        org.openide.awt.Mnemonics.setLocalizedText(btnNewTag, org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.btnNewTag.text")); // NOI18N
        btnNewTag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewTagActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnDeleteTag, org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.btnDeleteTag.text")); // NOI18N
        btnDeleteTag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTagActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(btnEdit, org.openide.util.NbBundle.getMessage(TagManagementPanel.class, "TagManagementPanel.btnEdit.text")); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnNewTag, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteTag, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(btnNewTag)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteTag)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEdit)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewTagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewTagActionPerformed
        try {                        
            SystemTags newSystemTag = new SystemTags();            
            int newId=getNewTagId(em);
            newSystemTag.setId(newId);
            String[] new_Tag = {"Tag"+String.valueOf(newId), "DB1.DBD0", "0.0", "100.0"};            
            newSystemTag.setTagName(new_Tag[0]);
            newSystemTag.setTagAddress(new_Tag[1]);
            newSystemTag.setMaxValue(Float.parseFloat(new_Tag[3]));
            newSystemTag.setMinValue(Float.parseFloat(new_Tag[2]));
            edited.create(newSystemTag);
            model.addRow(new_Tag);
            tagsList.add(newSystemTag);            
            this.store();
        } catch (Exception ex) {
            Exceptions.printStackTrace(ex);
        }
    }//GEN-LAST:event_btnNewTagActionPerformed

    private void btnDeleteTagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTagActionPerformed
    if (jTable1.getSelectedRow()!=-1){
        Query query = em.createNamedQuery("SystemTags.findByTagName");
        query.setParameter("tagName",jTable1.getValueAt(jTable1.getSelectedRow(), 0));
        tagList = query.getResultList();
        
        for (int i=0; i<tagList.size(); i++){
            try {
                edited.destroy(tagList.get(i).getId());
                model.removeRow(jTable1.getSelectedRow());
                tagsList.remove(i);                  
                this.store();
            } catch (NonexistentEntityException ex) {
                Exceptions.printStackTrace(ex);
            }
        } 
    }
    }//GEN-LAST:event_btnDeleteTagActionPerformed

    private void clearTable(){
        
        for (int i=0; i<tagsList.size(); i++){            
            try {
                model.removeRow(i);
                edited.destroy(tagsList.get(i).getId());                
            } catch (NonexistentEntityException ex) {
                Exceptions.printStackTrace(ex);
            }
        }        
    }
    
    void load() {                
        model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[] {"Имя тега", "Адрес в PLC", "Мин. значение", "Макс. значение"});        
        Query query = em.createNamedQuery("SystemTags.findAll");
        tagsList = query.getResultList();
        
        for (int i=0; i<tagsList.size(); i++){            
        
            model.insertRow(i, new Object[]{tagsList.get(i).getTagName(),
                tagsList.get(i).getTagAddress(),
                tagsList.get(i).getMinValue().toString(),
                tagsList.get(i).getMaxValue().toString()
            });            
        
        }
        model.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                int row = jTable1.getEditingRow();
                int column = jTable1.getEditingColumn();
                if (row!=-1) editTagFields(row, column);                
            }
        });
        jTable1.setModel(model);
        
        jFormattedTextField1.setText(NbPreferences.forModule(TagManagementPanel.class).get("PLC_Address", ""));
    }

    private void editTagFields(int row, int column){
        SystemTags editedTag = tagsList.get(row);         
                switch (column) {
                    case 0:{
                        editedTag.setTagName(jTable1.getValueAt(row, column).toString());
                        break;
                    }
                    case 1:{
                        editedTag.setTagAddress(jTable1.getValueAt(row, column).toString());
                        break;
                    }
                    case 2:{
                        editedTag.setMinValue(Float.parseFloat(jTable1.getValueAt(row, column).toString()));
                        break;
                    }
                    case 3:{
                        editedTag.setMaxValue(Float.parseFloat(jTable1.getValueAt(row, column).toString()));
                        break;
                    }
                }
                
                try {
                    edited.edit(editedTag);                     
                    controller.applyChanges();
                } catch (Exception ex) {
                    Exceptions.printStackTrace(ex);
                }
    }
    
    void store() {
        NbPreferences.forModule(TagManagementPanel.class).putInt("TagCount", jTable1.getRowCount());
        NbPreferences.forModule(TagManagementPanel.class).put("PLC_Address", jFormattedTextField1.getText());        
    }

    boolean valid() {
        // TODO check whether form is consistent and complete
        return true;
    }

    private int getNewTagId(EntityManager em) {        
        int id;
        Query query = em.createQuery("SELECT MAX(a.id) FROM SystemTags a");
        Object maxId = query.getSingleResult();
        if (maxId!=null){
            id = (int)maxId+1;
        }else{
            id=1;
        }
        return id;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeleteTag;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnNewTag;
    private datechooser.beans.DateChooserPanel dateChooserPanel1;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField plcName;
    // End of variables declaration//GEN-END:variables
}
