/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alexprom.tsp_account.vis;

import java.io.File;
import java.sql.Connection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import org.openide.DialogDisplayer;
import org.openide.NotifyDescriptor;

/**
 *
 * @author yura_
 */
public class TSP_DayReport extends javax.swing.JPanel {

    private String reportSource = System.getProperty("user.dir")+File.separator+"report_templates"+File.separator+"report1.jrxml";
    //private String reportDest = "./report_results/simple.html";
    private String reportDir = System.getProperty("user.dir")+File.separator+"report_templates"+File.separator;
    private Map<String, Object> params;
    
    /**
     * Creates new form TSP_DayReport
     * @param em
     * @param actDate
     */
    public TSP_DayReport(EntityManager em, String actDate) {
        initComponents();
        this.params = new HashMap<>();
        try{
            JasperReport jasperReport;
            jasperReport = JasperCompileManager.compileReport(reportSource);                        
            em.getTransaction().begin();
            Connection connection = em.unwrap(Connection.class);
            em.getTransaction().commit();                                                                      
            
            params.put("actDate", actDate);
            Query query = em.createQuery("SELECT MAX(t.id) as id, t.daqDate, t.daqTime FROM TSPReport t WHERE t.daqDate = :daqDate GROUP BY t.daqDate, t.daqTime order by id" );
            query.setParameter("daqDate", actDate);
            List<Object[]> dateTime = query.getResultList();           
            String[] times = new String[dateTime.size()];
            System.out.println(dateTime.size());
            if (dateTime.size()==2){
                for (int i=0; i<dateTime.size(); i++){
                    Object[] start = dateTime.get(i);
                    if (start.length==3){                           
                        times[i] = String.valueOf(start[2]);
                    }
                } 
                if (!dateTime.isEmpty()){                                
                    params.put("actTime", times[0]);
                    if (times.length==2){
                        params.put("endTime", times[1]);
                    }else{
                        params.put("endTime", times[0]);
                    }
                }                        
                params.put("SUBREPORT_DIR", reportDir);
                try {
                    JasperPrint jasperPrint;
                    jasperPrint = JasperFillManager.fillReport(jasperReport, params, connection); 
                    JasperViewer jasperView = new JasperViewer(jasperPrint, false);
                    jasperView.setTitle("Печать отчета по складу");
                    jasperView.setVisible(true);
                    //this.add(viewer);
                } catch (Exception ex) {
                    NotifyDescriptor d = new NotifyDescriptor.Message(ex, NotifyDescriptor.ERROR_MESSAGE);
                    Object result = DialogDisplayer.getDefault().notify(d);
                }
            }else{
                NotifyDescriptor d = new NotifyDescriptor.Message("Нет данных на выбранную дату либо склад на выбранную дату не закрыт!!!", NotifyDescriptor.ERROR_MESSAGE);
                Object result = DialogDisplayer.getDefault().notify(d);
            }
        }catch (JRException ex){
            NotifyDescriptor d = new NotifyDescriptor.Message(ex, NotifyDescriptor.ERROR_MESSAGE);
            Object result = DialogDisplayer.getDefault().notify(d);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
