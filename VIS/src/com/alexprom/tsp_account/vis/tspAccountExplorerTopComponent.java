/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.alexprom.tsp_account.vis;

import com.alexprom.connection.settings.dbConnectionSettingsPanel;
import com.alexprom.tsp_account.daq.TagManagementPanel;
import com.alexprom.tsp_account.daq.sensorSettingsPanel;
import com.alexprom.tsp_account.report_db.GlobalEntityManager;
import java.awt.BorderLayout;
import java.awt.Font;
import java.util.prefs.PreferenceChangeEvent;
import java.util.prefs.PreferenceChangeListener;
import java.util.prefs.Preferences;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import org.netbeans.api.settings.ConvertAsProperties;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.ExplorerUtils;
import org.openide.explorer.view.BeanTreeView;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.windows.TopComponent;
import org.openide.util.NbBundle.Messages;
import org.openide.util.NbPreferences;

/**
 * Top component which displays something.
 */
@ConvertAsProperties(
        dtd = "-//com.alexprom.tsp_account.vis//tspAccountExplorer//EN",
        autostore = false
)
@TopComponent.Description(
        preferredID = "tspAccountExplorerTopComponent",
        iconBase = "com/alexprom/tsp_account/vis/book 1.gif",
        persistenceType = TopComponent.PERSISTENCE_ALWAYS
)
@TopComponent.Registration(mode = "explorer", openAtStartup = true)
/*@ActionID(category = "Window", id = "com.alexprom.tsp_account.vis.tspAccountExplorerTopComponent")
@ActionReference(path = "Menu/Window" )
@TopComponent.OpenActionRegistration(
        displayName = "#CTL_tspAccountExplorerAction",
        preferredID = "tspAccountExplorerTopComponent"
)*/
@Messages({
    "CTL_tspAccountExplorerAction=Объекты учета",
    "CTL_tspAccountExplorerTopComponent=Объекты учета",
    "HINT_tspAccountExplorerTopComponent=This is a tspAccountExplorer window"
})
public final class tspAccountExplorerTopComponent extends TopComponent implements ExplorerManager.Provider{

    public EntityManagerFactory emf = null;
    public EntityManager em = null;
    private final ExplorerManager mgr = new ExplorerManager();
        
    public tspAccountExplorerTopComponent() {
        initComponents();
        setName(Bundle.CTL_tspAccountExplorerTopComponent());
        setToolTipText(Bundle.HINT_tspAccountExplorerTopComponent());
        putClientProperty(TopComponent.PROP_CLOSING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_DRAGGING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_MAXIMIZATION_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_SLIDING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_UNDOCKING_DISABLED, Boolean.TRUE);
        putClientProperty(TopComponent.PROP_KEEP_PREFERRED_SIZE_WHEN_SLIDED_IN, Boolean.TRUE);
        this.setFont(new Font("Tahoma", 1, 11));
        updatePersistence();
        setLayout(new BorderLayout());
        BeanTreeView tspTree = new BeanTreeView();        
        add(tspTree, BorderLayout.CENTER);        
        associateLookup(ExplorerUtils.createLookup(mgr, getActionMap()));
        getDeviceTree();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 189, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 466, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    public void componentOpened() {
        updatePersistence();
        Preferences pref = NbPreferences.forModule(dbConnectionSettingsPanel.class);
        pref.addPreferenceChangeListener(new PreferenceChangeListener() {
        @Override
        public void preferenceChange(PreferenceChangeEvent evt) {                        
            updatePersistence();
            getDeviceTree();
        }
        });
        Preferences tagsMgmt = NbPreferences.forModule(TagManagementPanel.class);
        tagsMgmt.addPreferenceChangeListener(new PreferenceChangeListener(){
            @Override
            public void preferenceChange(PreferenceChangeEvent evt) {
                getDeviceTree();
            }                
        }); 
        Preferences tankPref = NbPreferences.forModule(sensorSettingsPanel.class);
        tankPref.addPreferenceChangeListener(new PreferenceChangeListener() {
            @Override
            public void preferenceChange(PreferenceChangeEvent evt) {
                getDeviceTree();
            }
        });
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

    private void getDeviceTree(){
        deviceFactory factory = new deviceFactory();
        AbstractNode root = new AbstractNode(Children.create(factory, true));
        root.setDisplayName("ТСП");
        root.setIconBaseWithExtension("com/alexprom/tsp_account/vis/factory_ico.png");
        mgr.setRootContext(root);
    }
    
    public void updatePersistence(){                        
        GlobalEntityManager gem = new GlobalEntityManager();
        emf = gem.getEmf();
        em = gem.getEm();        
    }
    
    void writeProperties(java.util.Properties p) {
        // better to version settings since initial version as advocated at
        // http://wiki.apidesign.org/wiki/PropertyFiles
        p.setProperty("version", "1.0");
        // TODO store your settings
    }

    void readProperties(java.util.Properties p) {
        String version = p.getProperty("version");
        // TODO read your settings according to their version
    }

    @Override
    public ExplorerManager getExplorerManager() {
        return mgr;
    }
}
